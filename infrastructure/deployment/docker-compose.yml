# T3SS Distributed Search Engine - Docker Compose Configuration
# (c) 2025 Qiss Labs. All Rights Reserved.

version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: ../../frontend/api_gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
      - "9090:9090"  # Metrics
    environment:
      - CONFIG_FILE=/app/config/production_config.yaml
      - NODE_ID=api-gateway-1
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./config:/app/config
      - ./ssl:/etc/ssl
    depends_on:
      - redis-cluster
      - postgres-cluster
      - search-service
      - index-service
      - ranking-service
    networks:
      - t3ss-network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Search Service
  search-service:
    build:
      context: ../../core/querying/searcher
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      - CONFIG_FILE=/app/config/production_config.yaml
      - NODE_ID=search-service-1
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./config:/app/config
      - search-data:/data
    depends_on:
      - redis-cluster
      - postgres-cluster
      - elasticsearch-cluster
    networks:
      - t3ss-network
    deploy:
      replicas: 5
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Index Service
  index-service:
    build:
      context: ../../core/indexing/indexer
      dockerfile: Dockerfile
    ports:
      - "8082:8080"
    environment:
      - CONFIG_FILE=/app/config/production_config.yaml
      - NODE_ID=index-service-1
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./config:/app/config
      - index-data:/data
    depends_on:
      - redis-cluster
      - postgres-cluster
      - elasticsearch-cluster
    networks:
      - t3ss-network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'

  # Ranking Service
  ranking-service:
    build:
      context: ../../core/graph_core
      dockerfile: Dockerfile
    ports:
      - "8083:8080"
    environment:
      - CONFIG_FILE=/app/config/production_config.yaml
      - NODE_ID=ranking-service-1
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./config:/app/config
      - ranking-data:/data
    depends_on:
      - redis-cluster
      - postgres-cluster
    networks:
      - t3ss-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 6G
          cpus: '3.0'
        reservations:
          memory: 3G
          cpus: '1.5'

  # Distributed Crawler
  crawler:
    build:
      context: ../../core/indexing/crawler
      dockerfile: Dockerfile
    environment:
      - CONFIG_FILE=/app/config/production_config.yaml
      - NODE_ID=crawler-1
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./config:/app/config
      - crawler-data:/data
    depends_on:
      - redis-cluster
      - postgres-cluster
      - etcd-cluster
    networks:
      - t3ss-network
    deploy:
      replicas: 10
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Query Processor
  query-processor:
    build:
      context: ../../core/querying/query_parser
      dockerfile: Dockerfile
    ports:
      - "8084:8080"
    environment:
      - CONFIG_FILE=/app/config/production_config.yaml
      - NODE_ID=query-processor-1
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./config:/app/config
      - ./models:/models
    depends_on:
      - redis-cluster
      - postgres-cluster
    networks:
      - t3ss-network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Distributed Storage
  storage-engine:
    build:
      context: ../../core/storage
      dockerfile: Dockerfile
    ports:
      - "8085:8080"
    environment:
      - CONFIG_FILE=/app/config/production_config.yaml
      - NODE_ID=storage-engine-1
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./config:/app/config
      - storage-data:/data
    depends_on:
      - redis-cluster
      - postgres-cluster
    networks:
      - t3ss-network
    deploy:
      replicas: 5
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Metrics Collector
  metrics-collector:
    build:
      context: ../../infrastructure/monitoring
      dockerfile: Dockerfile
    ports:
      - "8086:8080"
    environment:
      - CONFIG_FILE=/app/config/production_config.yaml
      - NODE_ID=metrics-collector-1
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./config:/app/config
      - metrics-data:/data
    depends_on:
      - redis-cluster
      - postgres-cluster
      - prometheus
    networks:
      - t3ss-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis Cluster
  redis-cluster:
    image: redis:7-alpine
    command: redis-server --appendonly yes --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendfsync everysec --save 900 1 --save 300 10 --save 60 10000
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - t3ss-network
    deploy:
      replicas: 6
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # PostgreSQL Cluster
  postgres-cluster:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=t3ss
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - t3ss-network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Elasticsearch Cluster
  elasticsearch-cluster:
    image: elasticsearch:8.8.0
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - t3ss-network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # etcd Cluster
  etcd-cluster:
    image: quay.io/coreos/etcd:v3.5.9
    ports:
      - "2379:2379"
      - "2380:2380"
    command:
      - /usr/local/bin/etcd
      - --name=etcd-1
      - --data-dir=/etcd-data
      - --listen-client-urls=http://0.0.0.0:2379
      - --advertise-client-urls=http://etcd-cluster:2379
      - --listen-peer-urls=http://0.0.0.0:2380
      - --initial-advertise-peer-urls=http://etcd-cluster:2380
      - --initial-cluster=etcd-1=http://etcd-cluster:2380
      - --initial-cluster-token=etcd-cluster-1
      - --initial-cluster-state=new
    volumes:
      - etcd-data:/etcd-data
    networks:
      - t3ss-network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - t3ss-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - t3ss-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - t3ss-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl
    depends_on:
      - api-gateway
    networks:
      - t3ss-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  elasticsearch-data:
    driver: local
  etcd-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  search-data:
    driver: local
  index-data:
    driver: local
  ranking-data:
    driver: local
  crawler-data:
    driver: local
  storage-data:
    driver: local
  metrics-data:
    driver: local

networks:
  t3ss-network:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: 10.0.0.0/16