syntax = "proto3";

package t3ss.auth;

option go_package = "github.com/t3ss/shared_libs/proto/auth";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Authentication service definition
service AuthService {
  // User authentication
  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse);
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
  rpc Logout(LogoutRequest) returns (LogoutResponse);
  
  // OAuth operations
  rpc GetOAuthURL(GetOAuthURLRequest) returns (GetOAuthURLResponse);
  rpc HandleOAuthCallback(HandleOAuthCallbackRequest) returns (HandleOAuthCallbackResponse);
  
  // User management
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
  
  // Permission management
  rpc CheckPermission(CheckPermissionRequest) returns (CheckPermissionResponse);
  rpc GrantPermission(GrantPermissionRequest) returns (GrantPermissionResponse);
  rpc RevokePermission(RevokePermissionRequest) returns (RevokePermissionResponse);
  
  // API Key management
  rpc CreateAPIKey(CreateAPIKeyRequest) returns (CreateAPIKeyResponse);
  rpc ValidateAPIKey(ValidateAPIKeyRequest) returns (ValidateAPIKeyResponse);
  rpc RevokeAPIKey(RevokeAPIKeyRequest) returns (RevokeAPIKeyResponse);
  
  // Session management
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
  rpc ValidateSession(ValidateSessionRequest) returns (ValidateSessionResponse);
  rpc DestroySession(DestroySessionRequest) returns (DestroySessionResponse);
  
  // Health check
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Authentication request
message AuthenticateRequest {
  string username = 1;
  string password = 2;
  string email = 3;
  string provider = 4; // "local", "oauth", "saml", etc.
  map<string, string> provider_data = 5;
  string client_id = 6;
  string client_secret = 7;
  bool remember_me = 8;
}

// Authentication response
message AuthenticateResponse {
  bool success = 1;
  string message = 2;
  string access_token = 3;
  string refresh_token = 4;
  int64 expires_in = 5;
  string token_type = 6;
  User user = 7;
  repeated string permissions = 8;
  string session_id = 9;
}

// Refresh token request
message RefreshTokenRequest {
  string refresh_token = 1;
  string client_id = 2;
}

// Refresh token response
message RefreshTokenResponse {
  bool success = 1;
  string message = 2;
  string access_token = 3;
  string refresh_token = 4;
  int64 expires_in = 5;
}

// Logout request
message LogoutRequest {
  string access_token = 1;
  string session_id = 2;
  bool revoke_all_sessions = 3;
}

// Logout response
message LogoutResponse {
  bool success = 1;
  string message = 2;
}

// OAuth URL request
message GetOAuthURLRequest {
  string provider = 1; // "google", "github", "microsoft", etc.
  string redirect_uri = 2;
  string state = 3;
  repeated string scopes = 4;
  string client_id = 5;
}

// OAuth URL response
message GetOAuthURLResponse {
  string url = 1;
  string state = 2;
  string error = 3;
}

// OAuth callback request
message HandleOAuthCallbackRequest {
  string code = 1;
  string state = 2;
  string provider = 3;
  string redirect_uri = 4;
  string client_id = 5;
  string client_secret = 6;
}

// OAuth callback response
message HandleOAuthCallbackResponse {
  bool success = 1;
  string message = 2;
  string access_token = 3;
  string refresh_token = 4;
  int64 expires_in = 5;
  User user = 6;
  bool is_new_user = 7;
}

// User information
message User {
  string id = 1;
  string username = 2;
  string email = 3;
  string first_name = 4;
  string last_name = 5;
  string avatar_url = 6;
  bool email_verified = 7;
  bool is_active = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
  google.protobuf.Timestamp last_login = 11;
  repeated string roles = 12;
  map<string, string> metadata = 13;
}

// Create user request
message CreateUserRequest {
  string username = 1;
  string email = 2;
  string password = 3;
  string first_name = 4;
  string last_name = 5;
  repeated string roles = 6;
  map<string, string> metadata = 7;
  bool send_verification_email = 8;
}

// Create user response
message CreateUserResponse {
  bool success = 1;
  string message = 2;
  User user = 3;
  string verification_token = 4;
}

// Get user request
message GetUserRequest {
  string user_id = 1;
  string access_token = 2;
}

// Get user response
message GetUserResponse {
  bool success = 1;
  string message = 2;
  User user = 3;
}

// Update user request
message UpdateUserRequest {
  string user_id = 1;
  string access_token = 2;
  string first_name = 3;
  string last_name = 4;
  string email = 5;
  string avatar_url = 6;
  map<string, string> metadata = 7;
}

// Update user response
message UpdateUserResponse {
  bool success = 1;
  string message = 2;
  User user = 3;
}

// Delete user request
message DeleteUserRequest {
  string user_id = 1;
  string access_token = 2;
  bool permanent = 3;
}

// Delete user response
message DeleteUserResponse {
  bool success = 1;
  string message = 2;
}

// Permission check request
message CheckPermissionRequest {
  string user_id = 1;
  string resource = 2;
  string action = 3;
  string access_token = 4;
}

// Permission check response
message CheckPermissionResponse {
  bool allowed = 1;
  string reason = 2;
  repeated string required_permissions = 3;
}

// Grant permission request
message GrantPermissionRequest {
  string user_id = 1;
  string resource = 2;
  string action = 3;
  string access_token = 4;
  int64 expires_at = 5;
}

// Grant permission response
message GrantPermissionResponse {
  bool success = 1;
  string message = 2;
}

// Revoke permission request
message RevokePermissionRequest {
  string user_id = 1;
  string resource = 2;
  string action = 3;
  string access_token = 4;
}

// Revoke permission response
message RevokePermissionResponse {
  bool success = 1;
  string message = 2;
}

// API Key management
message CreateAPIKeyRequest {
  string user_id = 1;
  string name = 2;
  string description = 3;
  repeated string permissions = 4;
  int64 expires_at = 5;
  string access_token = 6;
}

message CreateAPIKeyResponse {
  bool success = 1;
  string message = 2;
  string api_key = 3;
  string key_id = 4;
  int64 expires_at = 5;
}

message ValidateAPIKeyRequest {
  string api_key = 1;
  string resource = 2;
  string action = 3;
}

message ValidateAPIKeyResponse {
  bool valid = 1;
  string user_id = 2;
  repeated string permissions = 3;
  int64 expires_at = 4;
  string name = 5;
}

message RevokeAPIKeyRequest {
  string api_key = 1;
  string access_token = 2;
}

message RevokeAPIKeyResponse {
  bool success = 1;
  string message = 2;
}

// Session management
message CreateSessionRequest {
  string user_id = 1;
  string access_token = 2;
  map<string, string> metadata = 3;
  int64 expires_at = 4;
}

message CreateSessionResponse {
  bool success = 1;
  string message = 2;
  string session_id = 3;
  int64 expires_at = 4;
}

message ValidateSessionRequest {
  string session_id = 1;
  string access_token = 2;
}

message ValidateSessionResponse {
  bool valid = 1;
  string user_id = 2;
  map<string, string> metadata = 3;
  int64 expires_at = 4;
}

message DestroySessionRequest {
  string session_id = 1;
  string access_token = 2;
}

message DestroySessionResponse {
  bool success = 1;
  string message = 2;
}

// Health check
message HealthCheckRequest {
  string service = 1;
}

message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
  }
  ServingStatus status = 1;
  string message = 2;
  map<string, string> details = 3;
}